import java.util.Arrays;

public class SortedMatrix {
    public static void main(String[] args){
        int[][] arr = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        System.out.println(Arrays.toString(Search(arr, 6)));
    }

    // search in the row provided between the cols provided
    static int[] BinarySearch(int[][] matrix, int row, int cStart, int cEnd, int target){
        while (cStart <= cEnd){
            int mid = cStart + (cEnd - cStart) / 2;
            if(matrix[row][mid] == target){
                return new int[]{row, mid};
            }
            if(matrix[row][mid] < target){
                cStart = mid + 1;
            } else {
                cEnd = mid - 1;
            }
        }
        return new int[]{-1, -1};
    }

    static int[] Search(int[][] matrix, int target){
        int rows = matrix.length;
        int cols = matrix[0].length; // be cautious, matrix may be empty;

        if(rows == 1){
            return BinarySearch(matrix, 0, 0, cols-1, target);
        }

        int rStart = 0;
        int rEnd = rows - 1;
        int cMid = cols / 2;

        // run the loop till 2 rows are remaining
        while(rStart < rEnd - 1){ // while this is true it will have more than two rows
            //////////////////////////////////
            int mid = rStart + (rEnd - rStart) / 2;
            if(matrix[mid][cMid] == target){
                return new int[]{mid, cMid};
            }
            if(matrix[mid][cMid] < target){
                rStart = mid;
            }
            if(matrix[mid][cMid] > target){
                rEnd = mid;
            }
        }

        // now we have two rows
        // check whether the target is in the column of 2 rows
        if(matrix[rStart][cMid] == target){
            return new int[]{rStart, cMid};
        }
        if(matrix[rEnd][cMid] == target){
            return new int[]{rEnd, cMid};
        }

        // search in 1st half
        if(target <= matrix[rStart][cMid-1]) {
            return BinarySearch(matrix, rStart, 0, cMid - 1, target);
        }
        // search in 2nd half
        if(target >= matrix[rStart][cMid+1] && target <= matrix[rStart][cols-1]) {
            return BinarySearch(matrix, rStart, cMid+1, cols-1, target);
        }
        // search in 3rd half
        if(target <= matrix[rEnd][cMid-1]) {
            return BinarySearch(matrix, rEnd, 0, cMid - 1, target);
        }
        // search in 4th half
        else {
            return BinarySearch(matrix, rEnd, cMid+1, cols-1, target);
        }
    }
}

Output : 
/home/luffy/.jdks/openjdk-20.0.2/bin/java -javaagent:/app/IDEA-C/lib/idea_rt.jar=36267:/app/IDEA-C/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/luffy/IdeaProjects/Algorithm/out/production/Algorithm SortedMatrix
[1, 2]

Process finished with exit code 0
