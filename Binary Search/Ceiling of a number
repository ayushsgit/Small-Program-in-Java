//Ceiling of a number means : The smallest number greater than or equal to target number in an array

public class CeilingOfANum {
    public static void main(String[] args) {
        int[] arr = {1,23,33,56,100,9999999};
        int target = 24;
        int ans = OrderAgnosticBS(arr,target);
        System.out.println("Celing of " +target+ " is at index : " +arr[ans]);
    }
    
    static int OrderAgnosticBS(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;

        boolean isAsc = arr[start] < arr[end];

        while(start <= end){
            //Find the middle element
//            int mid = (start+end)/2; //might be possible that (start+end) exceeds the int limit
            int mid = start + (end - start)/2;

            if (target == arr[mid]) {
                return mid;
            }

            if(isAsc) {
                if (target < arr[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }

            }else{
                if (target < arr[mid]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return start; // number at index start is greater than target , since now end is smaller than start so the number lies between end 
                      // and start but since it does not exist the required number greater than target is at the new start index , 
                      //ie. when end is less then start, ie. start = end + 1
    }
}

Output : 
/home/luffy/.jdks/openjdk-20.0.2/bin/java -javaagent:/app/IDEA-C/lib/idea_rt.jar=40185:/app/IDEA-C/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/luffy/IdeaProjects/Algorithm/out/production/Algorithm CeilingOfANum
Celing of 24 is at index : 33

Process finished with exit code 0

