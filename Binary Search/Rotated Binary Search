// https://leetcode.com/problems/search-in-rotated-sorted-array/description/
public class RBS {
    public static void main(String[] args) {
        int[] nums = {2,9,44,2,2,2,2};
        int ans = findPivotWithDuplicates(nums);
        System.out.println(nums[ans]);

    }
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        int ans = BinarySearch(nums, target, 0, pivot);
        // if pivot is not found, it means array is not rotated
        if(pivot == -1){
            // just do normal binary search
            return BinarySearch(nums, target, 0, nums.length - 1);
        }
        if(ans != -1){
            return ans;
        }else{
            return BinarySearch(nums, target, pivot + 1, nums.length - 1);
        }
    }

    static int BinarySearch(int[] arr, int target, int x, int y){
        int start = x;
        int end = y;
        while(start <= end){
            int mid = start + (end - start)/2;

            if (target > arr[mid]) {
                start = mid + 1;
            } else if (target < arr[mid]) {
                end = mid - 1;
            } else if (target == arr[mid]) {
                return mid;
            }
        }
        return -1;
    }

    // this will not work on Duplicates
    static int findPivot(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            // 4 cases over here
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            if(arr[mid] <= arr[start]){
                end = mid - 1;
            }
            if(arr[mid] > arr[start]){
                start = mid + 1;
            }
        }
        return -1;
    }

    // this is for duplicates
    static int findPivotWithDuplicates(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            // 4 cases over here
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }

            //if elements at middle, end, start are equal then just skip the duplicates
            if(arr[mid] == arr[start] && arr[mid] == arr[end]){
                // skip the duplicates
                // NOTE : what if these elements at start and end are the pivot?
                //check if start is pivot
                if(arr[start] > arr[start + 1]){
                    return start;
                }
                start++;
                // check whether end is pivot
                if(arr[end] < arr[end - 1]){
                    return end - 1;
                }
                end--;
            }
            // left side is sorted , so pivot should be in right
            else if (arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
}

Output : 
/home/luffy/.jdks/openjdk-20.0.2/bin/java -javaagent:/app/IDEA-C/lib/idea_rt.jar=43361:/app/IDEA-C/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/luffy/IdeaProjects/Algorithm/out/production/Algorithm RBS
44

Process finished with exit code 0
